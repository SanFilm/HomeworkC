// See https://aka.ms/new-console-template for more information
// Очистка консоли.
Console.Clear();
// Console.WriteLine("Hello, World!");

/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
//                    ||     _230322(l)-C#     ||                 //
//                    ||        Лекция.        ||                 //
//         _Урок 4. Двумерные массивы и рекурсия.mp4
/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
//        Двумерные массивы.
/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */

//                                                        [00:03:00]

// // Объявление двумерного массива строк.
// string[,] table = new string[2, 5];
// // Обращение к элементу.
// table[1, 3] = "Слово";
// // Заполнение массива строк.
// for (int i = 0; i < table.GetLength(0); i++)
// {
//   for (int j = 0; j < table.GetLength(1); j++)
//   {
//     Console.WriteLine($"-{table[i, j]}-");
//   }
//   Console.WriteLine();
// }

//                                                        [00:07:05]
// int m = 3, n = 4;
// Объявление двумерного массива целых чисел.
// int[,] matrix = new int[m, n];                            // [3, 4]
// Обращение к элементу массива.
// matrix[1, 1] = 11;    // Меняется после объявления массива.
// Заполнение массива целых чисел.
/*                  к количеству строк      */
// for (int i = 0; i < matrix.GetLength(0); i++)
// {
//   /*                 к количеству столбцов      */
//   for (int j = 0; j < matrix.GetLength(1); j++)
//   {
//     Console.Write($"{matrix[i, j]} \t");
//   }
//   Console.WriteLine();
// }
//                                                        [00:07:05]

// Console.WriteLine();

//                                                        [00:10:20]
// !!! Превращение в МЕТОД !!! Заполнение массива 0.
// void PrintArray(int[,] matr)
// {
//   /*                  к количеству строк      */
//   for (int i = 0; i < matr.GetLength(0); i++)
//   {
//     /*                 к количеству столбцов      */
//     for (int j = 0; j < matr.GetLength(1); j++)
//     {
//       Console.Write($"{matr[i, j]} \t");
//     }
//     Console.WriteLine();
//   }
// }

// Тело кода.
// matrix = new int[m, n - 1];                               // [3, 3]
// matrix[1, 2] = 22;    // Меняется после объявления массива.
// PrintArray(matrix);

//                                                        [00:10:20]

// Console.WriteLine();

//                                                        [00:11:30]
// !!! Превращение в МЕТОД !!! Random массива.
// void RandomArray(int[,] matr)
// {
//   for (int i = 0; i < matr.GetLength(0); i++)
//   {
//     for (int j = 0; j < matr.GetLength(1); j++)
//     {
//       matr[i, j] = new Random().Next(1, 10);   // [1, 9)
//     }
//   }
// }

// Тело кода.
// matrix = new int[m + 1, n + 1];                           // [4, 5]
// PrintArray(matrix);    // Проверка инициализации массива 0-ми.
// Console.WriteLine();
// RandomArray(matrix);
// matrix[2, 0] = 333;    // Меняется после объявления массива.
// PrintArray(matrix);
//                                                        [00:11:30]

//                                                        [00:14:30]
//                                                        [00:19:20]
// int[,] pic = new int[,]
// {
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };
// void PrintImage(int[,] image)
// {
//   for (int i = 0; i < image.GetLength(0); i++)
//   {
//     for (int j = 0; j < image.GetLength(1); j++)
//     {
//       if (image[i, j] == 0) Console.Write($" ");
//       else Console.Write($"+");
//     }
//     Console.WriteLine();
//   }
// }
// void FillImage(int row, int col)
// {
//   if (pic[row, col] == 0)
//   {
//     pic[row, col] = 1;
//     FillImage(row - 1, col);
//     FillImage(row, col - 1);
//     FillImage(row + 1, col);
//     FillImage(row, col + 1);
//   }
// }
// PrintImage(pic);
// FillImage(13, 13);
// PrintImage(pic);


/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
//                                                        [00:24:45]
//        Рекурсия.
/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
// Факториал                                              [00:25:25]
/* // !!! Факториал   5! = 5 * 4 * 3 * 2 * 1
                           5 * 4!
                               4 * 3!
                                   3 * 2!
*/

// int Factorial(int n)
// {
//   //  1! = 1
//   //  0! = 1
//   if (n == 1) return 1;
//   else return n * Factorial(n - 1);
// }
// Console.WriteLine(Factorial(3));  //  1*2*3 = 6

// Фибаначчи                                              [00:25:25]
/* // !!! Фибаначчи   1 1 2 3 5 8 13 21...
ƒn = ƒn-1 +ƒn-2
*/

// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)

// int Fibonacci(int n)
// {
//   if (n == 1 || n == 2) return 1;
//   else return Fibonacci(n - 1) + Fibonacci(n - 2);
// }
// for (int i = 1; i < 10; i++)
/* for (int i = 1; i < 44; i++) */        // Тормоза.
// {
//   Console.WriteLine($"{i}! = {Fibonacci(i)} ");
// }


/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
//                    ||     _230330(l)-C#     ||                 //
//                    ||        Лекция.        ||                 //
//         _Урок 7. Дополнительная лекция. Рекурсия- продолжение.mp4
/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */

/* // ! Собираем строку с числами от a до b, a≤b             [00:05:25]

// Итеративно, через 'For'                 от 1 2 3 4 -...- до N. //
string NumbersFor(int a, int b)
{
  string result = String.Empty;
  for (int i = a; i <= b; i++)
  {
    result += $"{i} ";
  }
  return result;
}
Console.WriteLine(NumbersFor(1, 10));   // ! 1 2 3 4 5 6 7 8 9 10
//                                        Итеративно, через 'For' //
// Через Рекурсию.                           от 1 2 3 4 ... до N. //
string NumbersRec(int a, int b)
{
  if (a <= b) return $"{a} " + NumbersRec(a + 1, b);
  else return String.Empty;
}
Console.WriteLine(NumbersRec(5, 10));   // ! 5 6 7 8 9 10
//                                                Через Рекурсию. //
 */
/* // ! Собираем строку с числами от b до a, a≤b               (Реверс)
// Итеративно, через 'For'                   от N ...до 4 3 2 1. //
string NumbersForRev(int a, int b)
{
  string result = String.Empty;
  for (int i = b; i >= a; i--)
  {
    result += $"{i} ";
  }
  return result;
}
Console.WriteLine(NumbersForRev(1, 10));   // ! 10 9 8 7 6 5 4 3 2 1
//                                        Итеративно, через 'For' //
// Через Рекурсию.                            от N ...до 4 3 2 1. //
string NumbersRecRev(int a, int b)
{
  if (a <= b) return NumbersRecRev(a + 1, b) + $"{a} ";
  else return String.Empty;
}
Console.WriteLine(NumbersRecRev(5, 10));   // ! 10 9 8 7 6 5
//                                                Через Рекурсию. //
 */

// ! Сумма чисел от 1 до n                               [00:07:00]
// Итеративно, через 'For'                                        //
int SumFor(int n)
{
  int result = 0;
  for (int i = 1; i <= n; i++) result += i;
  return result;
}
Console.WriteLine(SumFor(10)); // 55
//                                        Итеративно, через 'For' //
// Через Рекурсию.                                                //
int SumRec(int n)
{
  if (n == 0) return 0;
  else return n + SumRec(n - 1);
}
Console.WriteLine(SumRec(10)); // 55
//                                                Через Рекурсию. //